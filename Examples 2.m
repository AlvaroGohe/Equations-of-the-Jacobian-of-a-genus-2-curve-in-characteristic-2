
 load "Functions.m";
 
 PolQ<x> := PolynomialRing(Rationals());
 fD4 := -(-1 + 3*x - (4*x^2)/25 - (117*x^3)/25 + (32*x^4)/25 + (39*x^5)/25 + x^6/100);
 gD4 := x - x^2 - x^3;
 CD4 := HyperellipticCurve(fD4,gD4);
 JD4 := Jacobian(CD4);

 PolQ<x> := PolynomialRing(Rationals());
 Q2<w> := NumberField(x^2+12);
 PolQ2<x> := PolynomialRing(Q2);
 f3 := -1 + 7*x - 6*x^2 + 49*x^3 + 27*x^4 + 33*x^5 + 5*x^6;
 g3 := 2 - 6*x + 6*x^2 - 2*x^3;
 C3 := HyperellipticCurve(f3,g3);
 J3 := Jacobian(C3);
 Jac3 := GeneralJacobianSurface(J3);
 P15<v1, v2, v3, v4, v5, v6, k11, k12, k13, k14, k22, k23, k24, k33, k34, k44> := AmbientSpace(Jac3);
 P5<w1,w2,w3,w4,w5,w6> := ProjectiveSpace(Q2,5);
 proj3 := map<Jac3 -> P5| [21*k11 + 91*k13 - 14*k23 + k24 + 33*k33 + 14*v2 + 2*v4, 6*k11 + 30*k12 - 4*k13 - 4*k22 - 18*k23 - 18*k33 + 4*v1 + 18*v2 + 18*v3, 36*k11 + 6*k12 + k13 - 12*k14 - k24 + k44, 
 -12*k11 - 19*k12 - 42*k13 + 2*k14 - 3*k23 + 3*k24 + 6*k34, k11 + 3*k12 + 15*k13 + 9*k23 + 9*k33, -4*k13 + k22]>;
 proj2 := map<Jac3 -> P5|[-6*k11 + 6*k12 - 2*k13 - 2*k22 + 2*v1, 2*k11 + 6*k13 - 2*k23 + 2*v2, 2*k12 - 6*k13 - 2*k33 + 2*v3, 7*k11 + 49*k13 + k24 + 33*k33 + 2*v4, 
 98*k11 - 14*k12 + 270*k13 - 6*k14 + 42*k22 - 126*k23 + 6*k24 - 72*k33 - 2*k34 + 2*v5, -576*k11 + 168*k12 - 3144*k13 + 8*k14 + 40*k22 - 120*k23 - 72*k24 - 3272*k33 + 
  24*k34 + 2*v6]>;


 PolQ<x> := PolynomialRing(Rationals());
 f3 := -1 + 7*x - 6*x^2 + 49*x^3 + 27*x^4 + 33*x^5 + 5*x^6;
 g3 := 2 - 6*x + 6*x^2 - 2*x^3;
 C3rat := HyperellipticCurve(f3,g3);
 J3rat := Jacobian(C3rat);
 Jac3rat := GeneralJacobianSurface(J3rat);
 P15<v1, v2, v3, v4, v5, v6, k11, k12, k13, k14, k22, k23, k24, k33, k34, k44> := AmbientSpace(Jac3rat);
 P5<w1,w2,w3,w4,w5,w6> := ProjectiveSpace(Rationals(),5);
 proj3rat := map<Jac3rat -> P5| [21*k11 + 91*k13 - 14*k23 + k24 + 33*k33 + 14*v2 + 2*v4, 6*k11 + 30*k12 - 4*k13 - 4*k22 - 18*k23 - 18*k33 + 4*v1 + 18*v2 + 18*v3, 36*k11 + 6*k12 + k13 - 12*k14 - k24 + k44, 
 -12*k11 - 19*k12 - 42*k13 + 2*k14 - 3*k23 + 3*k24 + 6*k34, k11 + 3*k12 + 15*k13 + 9*k23 + 9*k33, -4*k13 + k22]>;


 PolQ<x> := PolynomialRing(Rationals());
 //Q2<w> := NumberField(x^2+x+1);
 Q2 := Rationals();
 PolQ2<x> := PolynomialRing(Q2);
 fc := 256 - 260*x^3 + 3*x^6;
 gc := 2*x^3;
 Cc := HyperellipticCurve(fc,gc);
 Jc := Jacobian(Cc);
 Jacc := GeneralJacobianSurface(Jc);
 P15<v1, v2, v3, v4, v5, v6, k11, k12, k13, k14, k22, k23, k24, k33, k34, k44> := AmbientSpace(Jacc);
 P4<w1,w2,w3,w4,w5> := ProjectiveSpace(Q2,4);
 P5<q1,q2,q3,q4,q5,q6> := ProjectiveSpace(Q2,5);
 projc := map<Jacc-> P4| [k11,k23,k34, 2*(k23 + v2), 2*(k34 + v5)]>;
 Kc := projc(Jacc);
 projc2 := map<Jacc-> P5| [k13, k22, k24, k44, 2*(k22 + k13 + v1), -260*k13 + k24 + 2*v4]>;
 KC2 := projc2(Jacc);
 P45<w1,w2,w3,w4,w5,q1,q2,q3,q4,q5,q6> := ProductProjectiveSpace(Q2,[4,5]);
 projcomb := map<Jacc -> P45 | [k11,k23,k34, 2*(k23 + v2), 2*(k34 + v5),k13, k22, k24, k44, 2*(k22 + k13 + v1), -260*k13 + k24 + 2*v4]>;
 pts := Points(Jc: Bound := 300);
 tor3pts := pts[1..9];
 tor3jac := [Gamma(Jacc,pt): pt in tor3pts];
 C6 := Scheme(P45,[    -q3^2 + q2*q4,    -w4*q3 - 1/260*w5*q3 + 1/130*w4*q4 + w3*q5 - 2/65*w3*q6,    -w3*q3 + w2*q4,    q1*q2 - 256/4993*q2^2 - 21893/1298180*q1*q3 + 4481/1298180*q2*q3 - 1/79888*q3^2 + 1/19972*q1*q4 + 16/4993*q5^2 - 4481/2596360*q5*q6 + 1/19972*q6^2,    -w3*q2 + w2*q3,    q1^2 + 256/4993*q2^2 + 3457/649090*q1*q3 + 128/324545*q2*q3 + 1/79888*q3^2 - 1/19972*q1*q4 - 16/4993*q5^2 - 64/324545*q5*q6 - 1/19972*q6^2,    1/512*w5*q1 + 1/133120*w5*q3 - 1/66560*w4*q4 + w1*q5 + 1/16640*w3*q6,    -65/2*w4*q1 + 1/8*w5*q1 - 1/8*w4*q3 - 1/2080*w5*q3 + 1/1040*w4*q4 + w2*q6 - 1/260*w3*q6,    -w4*q1 + 1/260*w5*q1 - w4*q2 - 1/260*w5*q2 + 1/260*w4*q3 - 1/67600*w5*q3 + 1/33800*w4*q4 + w2*q5 - 1/8450*w3*q6,    2*w4*q1 - 1/260*w5*q1 + 1/260*w5*q2 - 1/260*w4*q3 + 1/67600*w5*q3 - 1/33800*w4*q4 + w1*q6 + 1/8450*w3*q6,    2646/102635*w3*q1 + 20996/4737*w2*q2 - 8962/307905*w3*q2 + w1*q3 - 1/18948*w3*q3 - 1/260*w1*q4 - 5249/18948*w4*q5 + 1/1040*w5*q5 + 65/9474*w4*q6 + 1/37896*w5*q6,    5928363/3415692800*w3*q1 + w1*q2 + 13699/307905*w2*q2 - 128/20013825*w3*q2 - 4609/630589440*w3*q3 - 1/67600*w1*q4 - 13699/4926480*w4*q5 + 1/270400*w5*q5 -         1/37896*w4*q6 + 4609/1261178880*w5*q6,    w2*q1 - 65/6316*w3*q1 - 512/4737*w2*q2 + 65/18948*w3*q2 + 1/75792*w3*q3 + 32/4737*w4*q5 - 65/37896*w4*q6 - 1/151584*w5*q6,    w1*q1 + 2774/6671275*w3*q1 - 1067/102635*w2*q2 - 1451/6671275*w3*q2 - 1/1642160*w3*q3 - 1/67600*w1*q4 + 1067/1642160*w4*q5 + 1/270400*w5*q5 + 1/12632*w4*q6 +         1/3284320*w5*q6,    w1^2 + 1/64*w2^2 + 1/256*w1*w3 - 1/1024*w4^2,    w1*w2^2 - 65/256*w2^3 - 4481/66560*w1*w2*w3 + 1/512*w2^2*w3 + 1/4096*w1*w3^2 - 1/266240*w2*w3^2 + 65/4096*w2*w4^2 - 1/8192*w3*w4^2 + 1/2129920*w3*w4*w5 -         1/4259840*w2*w5^2]);
 
 function ADE(p)
 _,f,_,fdat := IsHypersurfaceSingularity(p,3);
 R<a,b,c> := Parent(f);
 _,f0,typ := NormalFormOfHypersurfaceSingularity(f);
 return typ, f0;
 end function;

 PolQ<x> := PolynomialRing(Rationals());
 //Q2<w> := NumberField(x^2+x+1);
 //Q2<w>:=GF(4);
 Q2 := Rationals();
 PolQ2<x> := PolynomialRing(Q2);
 fk := 4 - x^2 + 5*x^3 + 3*x^4 - 2*x^6;
 gk := 2*x - 3*x^3;
 //fk := -x^2 - x^4 - x^5 + x^6;
 //gk := 1 + 2*x^2 + x^3;
 Ck := HyperellipticCurve(fk,gk);
 Jk := Jacobian(Ck);
 Jack:= GeneralJacobianSurface(Jk);
 P15<v1, v2, v3, v4, v5, v6, k11, k12, k13, k14, k22, k23, k24, k33, k34, k44> := AmbientSpace(Jack);
 Kumk<k1,k2,k3,k4>:= GeneralKummerSurface(Jk);
 P3<q1,q2,q3,q4> := ProjectiveSpace(Q2,3);
 P4<w1,w2,w3,w4,w5> := ProjectiveSpace(Q2,4);
 P5<q1,q2,q3,q4,q5,q6> := ProjectiveSpace(Q2,5);
 P7<k111,k222,k123,k333,k224,k134,k244,k444> := ProjectiveSpace(Q2,7);
 P13<k111, k222, k123, k333, k224, k134, k244, k444, v12, v14, v21, v33, v42, v44> := ProjectiveSpace(Q2,13);
 P11<[q]> := ProjectiveSpace(Q2,11);
 projk := map<Jack-> P4| [k11, k23, 3*k33 + k34, v2, 3*k13 + k14 + 3*v3 + v5]>;
 projk2 := map<Jack-> P5| [-v2 + v4, k11 + v1, 9*k33 + 6*k34 + k44, 3*k23 + k24, k22, k13]>;
 projk3 := map<Jack-> P4| [-27*k23 - 18*v2 + v6, k13 + v3, k33, 3*k13 + k14, k12]>;
 projkum := map<Jack-> P11| [(9*k33 + 6*k34 + k44)^2, (3*k23 + k24)*(9*k33 + 6*k34 + k44), k22*(3*k23 + k24), k22^2, k33*(3*k33 + k34), (3*k13 + k14)*(3*k33 + k34), k23*k33, (3*k13 + k14)*k23, k12*k23,  k11*k33, k11*(3*k13 + k14), k11*k12]>;
 altprojkum := map<Kumk-> P7| [k1^3, k2^3, k1*k2*k3, k3^3, k2^2*(3*k3 + k4), k1*k3*(3*k3 + k4), k2*(3*k3 + k4)^2, (3*k3 + k4)^3]>;
 K3 := Surface(P13,[42560*k111*k123 + 1099*k123^2 + 8512*k111*k134 + 4480*k123*k134 - 20400*k111*k222 + 4168*k123*k222 - 1020*k222^2 - 880*k111*k224 - 2870*k123*k224 + 160*k222*k224 + 
  831*k224^2 + 640*k111*k244 - 40*k224*k244 - 16*k244^2 - 11172*k111*k333 + 2660*k123*k333 + 532*k134*k333 - 1275*k222*k333 - 55*k224*k333 + 760*k244*k333 + 144*k333*k444 - 
  768*k244*v12 + 768*k134*v14 - 960*k244*v33 - 192*k444*v33 + 64*v44^2, -403200*k111*k123 + 88305*k123^2 - 117124*k123*k134 - 322000*k111*k222 - 3080*k123*k222 - 
  11060*k222^2 + 16240*k111*k224 - 25634*k123*k224 + 1008*k222*k224 + 2765*k224^2 - 28*k224*k244 + 152460*k111*k333 - 31500*k123*k333 - 1260*k134*k333 - 13825*k222*k333 - 
  1505*k224*k333 + 252*k244*k333 - 118400*k111*v12 + 25280*k123*v12 - 13456*k134*v12 - 9280*k222*v12 - 1344*k224*v12 + 2320*k244*v12 - 11600*k333*v12 - 77440*k111*v14 - 
  19360*k134*v14 - 4000*k333*v14 + 42000*k123*v21 + 42000*k134*v21 - 8400*k224*v21 + 5040*k244*v21 + 8400*k333*v21 - 336*k244*v33 + 112*v42*v44, 
 -1764000*k111*k123 + 448245*k123^2 + 90720*k111*k134 - 584010*k123*k134 - 1940400*k111*k222 + 7560*k123*k222 - 64260*k222^2 - 35280*k111*k224 - 159642*k123*k224 + 
  13608*k222*k224 + 16065*k224^2 - 18144*k111*k244 - 3402*k224*k244 + 766080*k111*k333 - 151200*k123*k333 + 10080*k134*k333 - 80325*k222*k333 + 945*k224*k333 + 
  2394*k244*k333 - 769600*k111*v12 + 164320*k123*v12 - 78056*k134*v12 - 60320*k222*v12 - 12096*k224*v12 + 15080*k244*v12 - 75400*k333*v12 + 3024*k444*v12 - 449600*k111*v14 - 
  97280*k134*v14 - 30200*k333*v14 + 273000*k123*v21 + 239400*k134*v21 - 54600*k224*v21 - 4200*k244*v21 + 54600*k333*v21 - 6048*k444*v21 - 2184*k244*v33 + 168*v33*v44, 
 4800*k111*k123 - 1299*k123^2 + 1080*k123*k134 + 3120*k111*k222 - 72*k123*k222 + 156*k222^2 - 144*k111*k224 + 390*k123*k224 - 39*k224^2 - 1260*k111*k333 + 300*k123*k333 + 
  60*k134*k333 + 195*k222*k333 + 39*k224*k333 + 576*k111*v14 + 144*k134*v14 - 320*k134*v21 - 64*k244*v21 + 16*v21*v44, 
 210000*k111*k123 - 44310*k123^2 - 3360*k111*k134 + 64239*k123*k134 + 193200*k111*k222 + 2520*k123*k222 + 5880*k222^2 - 1680*k111*k224 + 14196*k123*k224 - 1260*k222*k224 - 
  1470*k224^2 + 1008*k111*k244 + 147*k224*k244 - 90090*k111*k333 + 17850*k123*k333 - 210*k134*k333 + 7350*k222*k333 - 105*k224*k333 - 315*k244*k333 + 88800*k111*v12 - 
  18960*k123*v12 + 10092*k134*v12 + 6960*k222*v12 + 1008*k224*v12 - 1740*k244*v12 + 8700*k333*v12 - 112*k444*v12 + 48000*k111*v14 + 11440*k134*v14 + 3000*k333*v14 - 
  31500*k123*v21 - 25200*k134*v21 + 6300*k224*v21 - 1260*k244*v21 - 6300*k333*v21 + 252*k444*v21 + 252*k244*v33 + 28*v14*v44, 
 8640*k111*k123 - 2187*k123^2 + 1560*k123*k134 + 5040*k111*k222 - 72*k123*k222 + 252*k222^2 - 720*k111*k224 + 1110*k123*k224 - 159*k224^2 - 2268*k111*k333 + 540*k123*k333 + 
  108*k134*k333 + 315*k222*k333 + 63*k224*k333 + 400*k134*v12 + 80*k244*v12 + 1152*k111*v14 + 288*k134*v14 - 720*k134*v21 - 720*k224*v21 - 288*k244*v21 + 16*v12*v44, 
 -2600640*k111*k123 + 587181*k123^2 + 84672*k111*k134 - 819840*k123*k134 - 2638160*k111*k222 - 17416*k123*k222 - 81508*k222^2 - 34832*k111*k224 - 192570*k123*k224 + 
  14560*k222*k224 + 16345*k224^2 - 22400*k111*k244 - 3640*k224*k244 + 112*k244^2 + 1148868*k111*k333 - 225540*k123*k333 + 5292*k134*k333 - 101885*k222*k333 - 
  2177*k224*k333 - 1400*k244*k333 - 1008*k333*k444 - 1184000*k111*v12 + 252800*k123*v12 - 134560*k134*v12 - 92800*k222*v12 - 13440*k224*v12 + 25888*k244*v12 - 
  116000*k333*v12 + 3360*k444*v12 - 640000*k111*v14 - 145888*k134*v14 - 40000*k333*v14 + 420000*k123*v21 + 336000*k134*v21 - 84000*k224*v21 + 84000*k333*v21 - 
  6720*k444*v21 + 672*k444*v33 + 224*k244*v44, 246400*k111*k123 - 57925*k123^2 - 11200*k111*k134 + 80864*k123*k134 + 266000*k111*k222 + 840*k123*k222 + 8260*k222^2 + 
  1680*k111*k224 + 19754*k123*k224 - 1568*k222*k224 - 2065*k224^2 + 1792*k111*k244 + 392*k224*k244 - 111300*k111*k333 + 21700*k123*k333 - 700*k134*k333 + 10325*k222*k333 + 
  105*k224*k333 - 392*k244*k333 + 118400*k111*v12 - 25280*k123*v12 + 13456*k134*v12 + 9280*k222*v12 + 1344*k224*v12 - 2320*k244*v12 + 11600*k333*v12 - 336*k444*v12 + 
  64000*k111*v14 + 14320*k134*v14 + 4000*k333*v14 - 42000*k123*v21 - 33600*k134*v21 + 8400*k224*v21 - 8400*k333*v21 + 672*k444*v21 + 336*k244*v33 + 112*k134*v44, 
 75600*k111*k123 - 14595*k123^2 + 22554*k123*k134 + 61600*k111*k222 + 1400*k123*k222 + 1820*k222^2 - 2800*k111*k224 + 4550*k123*k224 - 504*k222*k224 - 455*k224^2 + 
  14*k224*k244 - 31500*k111*k333 + 6300*k123*k333 + 2275*k222*k333 - 175*k224*k333 - 126*k244*k333 + 29600*k111*v12 - 6320*k123*v12 + 3364*k134*v12 + 2320*k222*v12 + 
  336*k224*v12 - 580*k244*v12 + 2900*k333*v12 + 16000*k111*v14 + 4000*k134*v14 + 1000*k333*v14 - 10500*k123*v21 - 8400*k134*v21 + 2100*k224*v21 - 840*k244*v21 - 
  2100*k333*v21 + 84*k244*v33 + 28*k224*v44, -806400*k111*k123 + 202545*k123^2 + 40320*k111*k134 - 266112*k123*k134 - 882000*k111*k222 + 2520*k123*k222 - 28980*k222^2 - 
  15120*k111*k224 - 72450*k123*k224 + 6048*k222*k224 + 7245*k224^2 - 8064*k111*k244 - 1512*k224*k244 + 351540*k111*k333 - 69300*k123*k333 + 4060*k134*k333 - 
  36225*k222*k333 + 315*k224*k333 + 1064*k244*k333 - 355200*k111*v12 + 75840*k123*v12 - 36336*k134*v12 - 27840*k222*v12 - 5376*k224*v12 + 6960*k244*v12 - 34800*k333*v12 + 
  1344*k444*v12 - 205440*k111*v14 - 44640*k134*v14 - 13680*k333*v14 + 126000*k123*v21 + 109200*k134*v21 - 25200*k224*v21 - 1680*k244*v21 + 25200*k333*v21 - 2688*k444*v21 - 
  1008*k244*v33 + 112*k333*v44, 2880*k111*k123 - 813*k123^2 + 760*k123*k134 + 2000*k111*k222 - 56*k123*k222 + 100*k222^2 - 176*k111*k224 + 250*k123*k224 - 25*k224^2 - 
  756*k111*k333 + 180*k123*k333 + 36*k134*k333 + 125*k222*k333 + 25*k224*k333 + 384*k111*v14 + 96*k134*v14 - 240*k134*v21 - 48*k244*v21 + 16*k123*v44, 
 2880*k111*k123 - 477*k123^2 + 360*k123*k134 + 720*k111*k222 + 72*k123*k222 + 36*k222^2 - 432*k111*k224 + 490*k123*k224 - 73*k224^2 - 756*k111*k333 + 180*k123*k333 + 
  36*k134*k333 + 45*k222*k333 + 9*k224*k333 + 240*k134*v12 + 48*k244*v12 + 384*k111*v14 + 96*k134*v14 - 240*k134*v21 - 480*k224*v21 - 144*k244*v21 + 16*k222*v44, 
 5*k111*k134 + 9*k123*k134 + k111*k244 - 3*k134*v12 - 3*k134*v21 + 3*k224*v21 + 2*k111*v44, -1567*k123^2 + 360*k123*k134 + 2160*k111*k222 + 216*k123*k222 - 180*k222^2 + 
  432*k111*k224 - 130*k123*k224 + 77*k224^2 + 756*k111*k333 - 180*k123*k333 - 36*k134*k333 - 225*k222*k333 - 45*k224*k333 - 1920*k111*v12 - 720*k134*v12 - 48*k244*v12 - 
  384*k111*v14 - 96*k134*v14 + 1200*k123*v21 + 240*k134*v21 + 720*k224*v21 + 144*k244*v21 + 16*v42^2, -7680*k111*k123 - 105*k123^2 - 2520*k123*k134 - 6960*k111*k222 - 
  216*k123*k222 - 108*k222^2 + 144*k111*k224 - 270*k123*k224 + 27*k224^2 + 3276*k111*k333 - 60*k123*k333 - 156*k134*k333 - 135*k222*k333 - 123*k224*k333 - 3200*k111*v12 + 
  896*k123*v12 - 400*k134*v12 - 320*k222*v12 + 80*k244*v12 - 400*k333*v12 - 1664*k111*v14 - 416*k134*v14 + 2000*k123*v21 + 1040*k134*v21 - 400*k224*v21 + 48*k244*v21 + 
  16*v33*v42, -60*k111*k123 + 30*k123^2 - 15*k123*k134 - 48*k111*k222 - 6*k123*k224 + 36*k111*v12 + 9*k134*v12 - 20*k123*v21 - 4*k224*v21 + v21*v42, 
 8640*k111*k123 - 2187*k123^2 + 1560*k123*k134 + 5040*k111*k222 - 72*k123*k222 + 252*k222^2 - 720*k111*k224 + 1110*k123*k224 - 159*k224^2 - 2268*k111*k333 + 540*k123*k333 + 
  108*k134*k333 + 315*k222*k333 + 63*k224*k333 + 400*k134*v12 + 80*k244*v12 + 1152*k111*v14 + 288*k134*v14 - 720*k134*v21 - 720*k224*v21 - 288*k244*v21 + 16*v14*v42, 
 -108*k111*k123 + 30*k123^2 - 27*k123*k134 - 108*k111*k222 + 30*k123*k222 - 9*k123*k224 - 6*k222*k224 + 72*k111*v12 + 25*k123*v12 + 18*k134*v12 + 5*k224*v12 - 45*k123*v21 - 
  45*k222*v21 - 18*k224*v21 + v12*v42, -2600640*k111*k123 + 587181*k123^2 + 84672*k111*k134 - 819840*k123*k134 - 2638160*k111*k222 - 17416*k123*k222 - 81508*k222^2 - 
  34832*k111*k224 - 192570*k123*k224 + 14560*k222*k224 + 16345*k224^2 - 22400*k111*k244 - 3640*k224*k244 + 112*k244^2 + 1148868*k111*k333 - 225540*k123*k333 + 
  5292*k134*k333 - 101885*k222*k333 - 2177*k224*k333 - 1400*k244*k333 - 1008*k333*k444 - 1184000*k111*v12 + 252800*k123*v12 - 134560*k134*v12 - 92800*k222*v12 - 
  13440*k224*v12 + 25888*k244*v12 - 116000*k333*v12 + 3360*k444*v12 - 640000*k111*v14 - 145888*k134*v14 - 40000*k333*v14 + 420000*k123*v21 + 336000*k134*v21 - 
  84000*k224*v21 + 84000*k333*v21 - 6720*k444*v21 + 672*k444*v33 + 224*k444*v42, 75600*k111*k123 - 14595*k123^2 + 22554*k123*k134 + 61600*k111*k222 + 1400*k123*k222 + 
  1820*k222^2 - 2800*k111*k224 + 4550*k123*k224 - 504*k222*k224 - 455*k224^2 + 14*k224*k244 - 31500*k111*k333 + 6300*k123*k333 + 2275*k222*k333 - 175*k224*k333 - 
  126*k244*k333 + 29600*k111*v12 - 6320*k123*v12 + 3364*k134*v12 + 2320*k222*v12 + 336*k224*v12 - 580*k244*v12 + 2900*k333*v12 + 16000*k111*v14 + 4000*k134*v14 + 
  1000*k333*v14 - 10500*k123*v21 - 8400*k134*v21 + 2100*k224*v21 - 840*k244*v21 - 2100*k333*v21 + 84*k244*v33 + 28*k244*v42, 
 2880*k111*k123 - 813*k123^2 + 760*k123*k134 + 2000*k111*k222 - 56*k123*k222 + 100*k222^2 - 176*k111*k224 + 250*k123*k224 - 25*k224^2 - 756*k111*k333 + 180*k123*k333 + 
  36*k134*k333 + 125*k222*k333 + 25*k224*k333 + 384*k111*v14 + 96*k134*v14 - 240*k134*v21 - 48*k244*v21 + 16*k134*v42, 
 2880*k111*k123 - 477*k123^2 + 360*k123*k134 + 720*k111*k222 + 72*k123*k222 + 36*k222^2 - 432*k111*k224 + 490*k123*k224 - 73*k224^2 - 756*k111*k333 + 180*k123*k333 + 
  36*k134*k333 + 45*k222*k333 + 9*k224*k333 + 240*k134*v12 + 48*k244*v12 + 384*k111*v14 + 96*k134*v14 - 240*k134*v21 - 480*k224*v21 - 144*k244*v21 + 16*k224*v42, 
 -5760*k111*k123 + 279*k123^2 - 1800*k123*k134 - 5040*k111*k222 - 216*k123*k222 - 108*k222^2 + 144*k111*k224 - 270*k123*k224 + 27*k224^2 + 2268*k111*k333 - 140*k123*k333 - 
  108*k134*k333 - 135*k222*k333 - 91*k224*k333 - 1920*k111*v12 + 576*k123*v12 - 240*k134*v12 - 192*k222*v12 + 48*k244*v12 - 240*k333*v12 - 1152*k111*v14 - 288*k134*v14 + 
  1200*k123*v21 + 720*k134*v21 - 240*k224*v21 + 48*k244*v21 + 16*k333*v42, -36*k111*k123 + 25*k123^2 - 9*k123*k134 - 36*k111*k222 - 4*k123*k224 + 24*k111*v12 + 6*k134*v12 - 
  15*k123*v21 - 3*k224*v21 + k123*v42, -36*k111*k123 - 9*k123*k134 - 36*k111*k222 + 25*k123*k222 - 4*k222*k224 + 24*k111*v12 + 15*k123*v12 + 6*k134*v12 + 3*k224*v12 - 
  15*k123*v21 - 30*k222*v21 - 9*k224*v21 + k222*v42, 5*k111*k123 + 9*k123^2 + k111*k224 - 3*k123*v12 - 3*k123*v21 + 3*k222*v21 + 2*k111*v42, 
 -4*k123^2 - k134*k333 + 2*k333^2 - 3*k333*v33 + v33^2, 224*k111*k123 + 91*k123*k134 + 252*k111*k222 - 140*k111*k333 + 14*k123*k333 + 232*k111*v12 - 40*k123*v12 + 
  29*k134*v12 + 20*k222*v12 - 5*k244*v12 + 25*k333*v12 + 80*k111*v14 + 20*k134*v14 + 5*k333*v14 - 105*k123*v21 - 42*k134*v21 + 21*k224*v21 - 21*k333*v21 + 7*v21*v33, 
 -62720*k111*k123 + 12047*k123^2 - 448*k111*k134 - 17640*k123*k134 - 49840*k111*k222 - 1176*k123*k222 - 1484*k222^2 + 2128*k111*k224 - 3710*k123*k224 + 371*k224^2 + 
  25788*k111*k333 - 5180*k123*k333 - 252*k134*k333 - 1855*k222*k333 - 147*k224*k333 - 23680*k111*v12 + 5056*k123*v12 - 2960*k134*v12 - 1856*k222*v12 + 464*k244*v12 - 
  2320*k333*v12 - 12800*k111*v14 - 3200*k134*v14 - 800*k333*v14 + 8400*k123*v21 + 6720*k134*v21 - 1680*k224*v21 + 672*k244*v21 + 1680*k333*v21 + 112*v14*v33, 
 756*k111*k123 - 140*k123^2 + 259*k123*k134 + 756*k111*k222 + 28*k123*k224 - 315*k111*k333 + 49*k123*k333 + 14*k222*k333 + 296*k111*v12 - 80*k123*v12 + 16*k134*v12 + 
  40*k222*v12 - 10*k244*v12 + 29*k333*v12 + 160*k111*v14 + 40*k134*v14 + 10*k333*v14 - 105*k123*v21 - 84*k134*v21 + 63*k224*v21 - 21*k333*v21 + 7*v12*v33, 
 -40320*k111*k123 + 5985*k123^2 - 12600*k123*k134 - 35280*k111*k222 - 1512*k123*k222 - 756*k222^2 + 1008*k111*k224 - 1890*k123*k224 + 189*k224^2 + 19908*k111*k333 - 
  3780*k123*k333 - 756*k134*k333 - 945*k222*k333 - 189*k224*k333 - 23680*k111*v12 + 5056*k123*v12 - 2960*k134*v12 - 1856*k222*v12 + 464*k244*v12 - 2320*k333*v12 - 
  10112*k111*v14 - 2528*k134*v14 - 464*k333*v14 + 8400*k123*v21 + 5040*k134*v21 - 1680*k224*v21 + 336*k244*v21 + 1680*k333*v21 + 336*k134*v33, 
 -80640*k111*k123 + 17955*k123^2 - 22680*k123*k134 - 65520*k111*k222 - 504*k123*k222 - 2268*k222^2 + 3024*k111*k224 - 5670*k123*k224 + 567*k224^2 + 30492*k111*k333 - 
  6300*k123*k333 - 252*k134*k333 - 2835*k222*k333 - 567*k224*k333 - 23680*k111*v12 + 5056*k123*v12 - 2960*k134*v12 - 1856*k222*v12 + 464*k244*v12 - 2320*k333*v12 - 
  15488*k111*v14 - 3872*k134*v14 - 800*k333*v14 + 8400*k123*v21 + 8400*k134*v21 - 1680*k224*v21 + 1008*k244*v21 + 1680*k333*v21 + 336*k224*v33, 
 504*k111*k123 + 189*k123*k134 + 504*k111*k222 - 315*k111*k333 + 464*k111*v12 - 80*k123*v12 + 58*k134*v12 + 40*k222*v12 - 10*k244*v12 + 50*k333*v12 + 160*k111*v14 + 
  40*k134*v14 + 10*k333*v14 - 210*k123*v21 - 84*k134*v21 + 42*k224*v21 - 21*k333*v21 + 21*k123*v33, 1008*k111*k123 - 315*k123^2 + 315*k123*k134 + 1008*k111*k222 + 
  63*k123*k224 - 315*k111*k333 + 63*k123*k333 + 128*k111*v12 - 80*k123*v12 - 26*k134*v12 + 40*k222*v12 - 10*k244*v12 + 29*k333*v12 + 160*k111*v14 + 40*k134*v14 + 
  10*k333*v14 - 84*k134*v21 + 84*k224*v21 - 21*k333*v21 + 21*k222*v33, -63*k111*k333 + 80*k111*v12 - 8*k123*v12 + 10*k134*v12 + 4*k222*v12 - k244*v12 + 5*k333*v12 + 
  16*k111*v14 + 4*k134*v14 + k333*v14 - 21*k123*v21 + 21*k111*v33, -4*k111^2 + 2*k123^2 - k111*k134 - 3*k123*v21 + v21^2, 
 -5*k111*k134 + 5*k123*k134 + 4*k123*k224 - k111*k244 - 3*k134*v12 - 3*k134*v21 - 3*k224*v21 + 2*v14*v21, 
 -5*k111*k123 + 5*k123^2 + 4*k123*k222 - k111*k224 - 3*k123*v12 - 3*k123*v21 - 3*k222*v21 + 2*v12*v21, 
 -320*k111*k123 + 263*k123^2 - 64*k111*k134 - 40*k123*k134 - 880*k111*k222 + 72*k123*k222 - 44*k222^2 - 176*k111*k224 - 110*k123*k224 + 27*k224^2 - 40*k111*k244 + 
  84*k111*k333 - 20*k123*k333 - 4*k134*k333 - 55*k222*k333 - 11*k224*k333 - 8*k111*k444 - 24*k244*v12 - 24*k134*v14 + 8*v14^2, 
 2*k123*k134 - 5*k111*k224 + 5*k123*k224 + 2*k222*k224 - k111*k244 - 3*k134*v12 - 3*k224*v12 + v12*v14, -(k444*v12) + k244*v14, -(k244*v12) + k224*v14, 
 -(k134*v12) + k123*v14, -(k224*v12) + k222*v14, 2*k123^2 - 5*k111*k222 + 5*k123*k222 + 2*k222^2 - k111*k224 - 3*k123*v12 - 3*k222*v12 + v12^2, 
 6720*k111*k123 - 3885*k123^2 + 1344*k111*k134 + 1680*k123*k134 + 12240*k111*k222 - 888*k123*k222 + 612*k222^2 - 752*k111*k224 + 1850*k123*k224 - 160*k222*k224 - 89*k224^2 + 
  640*k111*k244 + 40*k224*k244 - 16*k244^2 - 1764*k111*k333 + 420*k123*k333 + 84*k134*k333 + 765*k222*k333 - 47*k224*k333 + 40*k244*k333 + 256*k111*k444 + 64*k134*k444 + 
  16*k333*k444, -k244^2 + k224*k444, 105*k123^2 - 42*k123*k134 - 400*k111*k222 + 40*k123*k222 - 20*k222^2 + 80*k111*k224 - 66*k123*k224 + 8*k222*k224 + 5*k224^2 + 
  32*k111*k244 - 2*k224*k244 - 25*k222*k333 + 5*k224*k333 + 2*k244*k333 + 8*k123*k444, -(k224*k244) + k222*k444, 
 105*k123^2 - 42*k123*k134 - 400*k111*k222 + 40*k123*k222 - 20*k222^2 + 80*k111*k224 - 66*k123*k224 + 8*k222*k224 + 5*k224^2 + 32*k111*k244 + 8*k134*k244 - 2*k224*k244 - 
  25*k222*k333 + 5*k224*k333 + 2*k244*k333, -21*k123^2 + 80*k111*k222 - 8*k123*k222 + 4*k222^2 + 16*k111*k224 + 10*k123*k224 - k224^2 + 4*k123*k244 + 5*k222*k333 + 
  k224*k333, -k224^2 + k222*k244, 320*k111*k123 - 53*k123^2 + 64*k111*k134 + 40*k123*k134 + 16*k134^2 + 80*k111*k222 + 8*k123*k222 + 4*k222^2 + 16*k111*k224 + 10*k123*k224 - 
  k224^2 - 84*k111*k333 + 20*k123*k333 + 4*k134*k333 + 5*k222*k333 + k224*k333, -21*k123^2 + 80*k111*k222 - 8*k123*k222 + 4*k222^2 + 16*k111*k224 + 10*k123*k224 + 
  4*k134*k224 - k224^2 + 5*k222*k333 + k224*k333, k134*k222 - k123*k224]);
 altprojkum := map<Kumk-> P7| [k1^3, k2^3, k1*k2*k3, k3^3, k2^2*(3*k3 + k4), k1*k3*(3*k3 + k4), k2*(3*k3 + k4)^2, (3*k3 + k4)^3]>;
 K6 := altprojkum(Kumk);
 proj3to6 := map<K3-> K6 | [k111, k222, k123, k333, k224, k134, k244, k444]>;
 //projk3 := map<Kumk-> P14| [k1^3, k2^3, k1*k2*k3, k3^3, k2^2*(3*k3 + k4), k1*k3*(3*k3 + k4), k2*(3*k3 + k4)^2, (3*k3 + k4)^3, k2*(k1^2 + v1), (3*k3 + k4)*(k1^2 + v1), k1*v2, -(k2*(v2 - v4)), -((3*k3 + k4)*(v2 - v4)), k1*(3*k1*k3 + k1*k4 + 3*v3 + v5), -(k3*(27*k2*k3 + 18*v2 - v6))]>;
 //Kk := projk(Jack);

 PolQ<x> := PolynomialRing(Rationals());
 Q2<w> := NumberField(x^2+1);
 //Q2 := Rationals();
 PolQ2<x> := PolynomialRing(Q2);
 f4 := 1 - 2*x^2 - x^3 - 2*x^4 - x^5 + x^6;
 g4 := 1 + x + x^2 + x^3;
 C4 := HyperellipticCurve(f4,g4);
 J4 := Jacobian(C4);
 Jac4:= GeneralJacobianSurface(J4);
 P15<v1, v2, v3, v4, v5, v6, k11, k12, k13, k14, k22, k23, k24, k33, k34, k44> := AmbientSpace(Jac4);
 Kum4<k1,k2,k3,k4>:= GeneralKummerSurface(J4);
 P3<q1,q2,q3,q4> := ProjectiveSpace(Q2,3);
 P4<w1,w2,w3,w4,w5> := ProjectiveSpace(Q2,4);
 P5<q1,q2,q3,q4,q5,q6> := ProjectiveSpace(Q2,5);
 P7<k111,k222,k123,k333,k224,k134,k244,k444> := ProjectiveSpace(Q2,7);
 P14<k111,k222,k123,k333,k224,k134,k244,k444,v12,v14,v21,v22,v44,v51,v63> := ProjectiveSpace(Q2,14);
 P11<[q]> := ProjectiveSpace(Q2,11);
 proj4 := map<Jac4-> P5| [-k24 + k44, -k12 + k14 + k34, k11 + k33, -k12 + k23, k22, k13]>;
 //projk3 := map<Kumk-> P14| [k1^3, k2^3, k1*k2*k3, k3^3, k2^2*(3*k3 + k4), k1*k3*(3*k3 + k4), k2*(3*k3 + k4)^2, (3*k3 + k4)^3, k2*(k1^2 + v1), (3*k3 + k4)*(k1^2 + v1), k1*v2, -(k2*(v2 - v4)), -((3*k3 + k4)*(v2 - v4)), k1*(3*k1*k3 + k1*k4 + 3*v3 + v5), -(k3*(27*k2*k3 + 18*v2 - v6))]>;
 //Kk := projk(Jack);


